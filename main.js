(()=>{"use strict";var n={919:(n,e,t)=>{t.d(e,{A:()=>B});var r=t(354),o=t.n(r),a=t(314),i=t.n(a),s=t(417),c=t.n(s),d=new URL(t(440),t.b),A=new URL(t(718),t.b),l=new URL(t(541),t.b),u=new URL(t(322),t.b),m=new URL(t(23),t.b),h=i()(o()),g=c()(d),p=c()(A),f=c()(l),C=c()(u),b=c()(m);h.push([n.id,`:root{\n    --nav-background-color: #DC144F;\n    --nav-text-color: #fff;\n    --main-background-color: #e7e5e4;\n    --item-background-color: #fafaf9;\n    --hover-item-color:#c50b46;\n    --container-items-color:#fb3868;\n}\n\n\nbody {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    min-height: 100vh;\n    display: grid;\n    grid-template-rows: auto 1fr auto; /* Three rows: header, main content, footer */\n}\n\nheader {\n    grid-row: 1; /* Header takes the first row */\n    background-color: var(--nav-background-color);\n    color: var(--nav-text-color);\n    padding: 10px;\n    text-align: center;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding-inline: 1.5rem;\n    border-bottom: black 2px solid;\n}\n\n.header-title {\n    font-size: 2.2rem;\n    margin: 0.5rem;\n    flex-grow: 1; /* Allow the title to grow and take the available space */\n}\n\n#menuBtn{\n    background-color: inherit;\n    cursor: pointer;\n    border: 0;\n}\n\n\n#menuBtn img{\n    height: 25px;\n    width: 25px;\n}\n\n\n.sidebar-hidden {\n    transform: translateX(-100%); /* Move the sidebar off-screen */\n}\n\n\n/* Navigation bar */\n\nnav {\n    transition: transform 0.3s ease; /* Adding transition for smoother animation */\n    transform: translateX(0); /* Initial position */\n    transform: translateY(0);\n}\n\n#navigation-bar {\n    background-color: var(--nav-background-color);\n    max-width: 330px; /* Set the width of the sidebar */\n    width: calc(60% - 40px); /* 40px is padding from both sides */\n    position: static; /* Fixed position so it stays in place */\n    overflow-y: auto; /* Enable vertical scrolling */\n    padding: 20px;\n}\n\n#navigation-bar  ul {\n    margin: 0;\n    padding: 0;\n    list-style-type: none;\n    border: 0;\n}\n\n#navigation-bar  ul li a {\n    display: block;\n    color: var(--nav-text-color);\n    padding: 15px 20px;\n    text-decoration: none;\n    border-radius: 5px;\n    font-size: 20px;\n}\n\n\n#navigation-bar  ul li a:hover {\n    background-color: var(--hover-item-color);\n}\n\n#add-project-btn{\n    margin-top: 10px;\n    padding-inline: 15px;\n    list-style-type: none;\n    width: 100%;\n    height: 45px;\n    font-size: 20px;\n    border: 0;\n    border-radius: 5px;\n    background-color: inherit;\n}\n\n#add-project-btn:hover {\n    background-color: var(--hover-item-color);  \n}\n\n#add-project-btn span{\n    display: flex;\n    justify-content: left;\n    align-items: center;\n    color: var(--nav-text-color);\n}\n\n\n#add-project-btn span img{\n    width: 30px;\n    height: 30px;\n    margin-right: 35px;\n    color: var(--nav-text-color);\n    border: black solid 3px;\n    border-radius: 50%;\n}\n\n.project {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    color: var(--nav-text-color);\n    padding: 15px 20px;\n    text-decoration: none;\n    font-size: 2rem;\n    border-radius: 5px;\n    cursor: pointer;\n}\n\n.project:hover {\n    background-color: var(--hover-item-color); \n}\n\n.project-closer{\n    font-size: 2.5rem;\n}\n\n\n\n/* Creating new project */\n.creating-project{\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    height: 4.5rem;\n    align-items: center;\n    justify-content: space-around;\n}\n\n.new-project-title{\n    height: 1.5rem;\n    width: 90%;\n}\n\n.creating-project-btns{\n    display: flex;\n    flex-flow: row nowrap;\n    gap: 20px;\n    width: 90% ;\n}\n\n.creating-project-btn{\n    height: 1.5rem;\n    width: 50%;\n    color: black;\n    text-align: center;\n    border-radius: 4px;\n    border: none;\n    cursor: pointer;\n    font-size: 1rem;\n}\n\n.creating-project-btn:first-child{\n    background-color: rgb(42, 189, 103);\n}\n\n.creating-project-btn:last-child{\n    background-color: rgb(225, 165, 21);\n}\n\n.navigation-title{\n    font-size: 30px;\n    font-weight: bold;\n    border-bottom: black 2px solid;\n    margin-block: 15px;\n}\n\n\n/* Main */\n\nmain {\n    grid-row: 2/3; /* Main content takes the second row */\n    background-color: var(--main-background-color);\n    display: flex;\n    flex-direction: row;\n    width: 100%;\n}\n\n#content{\n    display: flex;\n    flex-direction: column;\n    margin-inline: 3rem;\n    margin-block: 1.5rem;\n    width: 100%;\n    background-color: var(--main-background-color);\n}\n\n#project-title{\n    font-size: 3rem;\n    margin: 0;\n    padding: 1.2rem;\n    border-radius: 5px;\n    max-height: 4rem;\n    background-color: var(--nav-background-color);\n    color: var(--nav-text-color);\n}\n\n.task-container{\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    margin-block: 1.5rem;\n    padding-inline: 0.8rem;\n    min-width:420px ;\n    border-radius: 5px;\n    background-color: var(--nav-background-color);\n}\n\n.task-container .left-side{\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    gap: 1rem;\n    align-items: center;\n}\n\n\n.task-container .right-side{\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    gap: 0.6rem;\n    align-items: center;\n}\n\n\n\n.task-checkbox {\n    width: 1rem;\n    height: 1rem;\n    background-color: #fff;\n    border: 1px solid black;\n    border-radius: 10px;\n    cursor: pointer;\n}\n\n/* All checked elements */\n\n.checked{\n    opacity: 0.6;\n}\n\n.checked > .task-checkbox{\n    background-color: var(--container-items-color);\n    background-size: 100%;\n    background-image: url(${g});\n    background-repeat: no-repeat;\n    background-origin:border-box ;\n}\n\n.checked > .task-title{\n    text-decoration: line-through;\n}\n\n/* Importants  */\n.importantBtn{\n    background-image: url(${p});\n    height: 1.2rem;\n    width: 1.2rem;\n    background-repeat: round;\n    background-origin:border-box ;\n    cursor: pointer;\n}\n\n.important{\n    background-image: url(${f});\n}\n\n/* other task buttons */\n.task-editBtn{\n    background-image: url(${C});\n    height: 1.2rem;\n    width: 1.2rem;\n    background-repeat: round;\n    background-origin:border-box ;\n    cursor: pointer;\n}\n\n.task-deleteBtn{\n    background-image: url(${b});\n    height: 1.2rem;\n    width: 1.2rem;\n    background-repeat: round;\n    background-origin:border-box ;\n    cursor: pointer;\n}\n\n.task-details{\n    font-size: 0.9rem;\n    padding: 5px;\n    border-radius: 5px;\n    border: black solid 1px;\n    cursor: pointer;\n}\n\n.overlay-details {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    z-index: 1000;\n}\n\n.detail-window {\n    background-color: white;\n    padding: 20px;\n    border-radius: 5px;\n    max-width: 500px;\n    width: 90%;\n}\n\n.detail-window h2 {\n    margin-top: 0;\n}\n\n.detail-window button {\n    margin-top: 15px;\n    padding: 5px 10px;\n    background-color: #007bff;\n    color: white;\n    border: none;\n    border-radius: 3px;\n    cursor: pointer;\n}\n\n.detail-window button:hover {\n    background-color: #0056b3;\n}\n\n.task-date{\n    font-size: 0.9rem;\n    padding: 5px;\n    border-radius: 5px;\n    border: black solid 1px;\n}\n\n.task-date-expose{\n    background-color: var(--nav-background-color);\n    color: white;\n}\n\n\n#task-adding-btn{\n    position: fixed;\n    bottom: 15px; /* This will be adjusted dynamically */\n    right: 10px;\n    background-color: var(--nav-background-color);\n    color: var(--nav-text-color);\n    border: none;\n    border-radius: 50%;\n    width: 60px;\n    height: 60px;\n    cursor: pointer;\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    transition: bottom 0.3s ease; /* Smooth transition for bottom positioning */\n}\n\n\n#task-adding-btn > img{\n    width: 100%;\n    height: 100%;\n}\n\n\n/* New Task */\n.overlay-new{\n    position: fixed;\n    top: 0;\n    left: 0;\n    padding: 10px;\n    width: 100vw;\n    height: 100vh;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    visibility: visible;\n    opacity: 1;\n    transition: all .3s;\n    background-color: rgba(0, 0, 0, 0.3);\n    backdrop-filter: blur(10px);\n}\n\n.overlay-new-invisible{\n    visibility: hidden;\n    opacity: 0;\n}\n\n.form-container{\n    position: absolute;\n    visibility: hidden;\n    height: 30rem;\n    width: 90%;\n    min-width: 450px;\n    max-width: 1000px;\n    border-radius: 4px;\n    overflow: hidden;\n    box-shadow: 0 2rem 4rem rgba(0, 0, 0, 0.6);\n    background-color: var(--item-background-color);\n    display: flex;\n    flex-flow: column nowrap;\n    transform: scale(0);\n}\n\n.form-container-open{\n    transform: scale(1);\n    visibility: visible;\n}\n\n.form-container-header{\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    justify-content: space-between;\n    background-color: var(--nav-background-color);\n    color: var(--item-background-color);\n}\n\n.form-container-title{\n    padding: 10px;\n    margin: 0;\n}\n\n.form-container-closer{\n    align-content: center;\n    text-align: center;\n    font-size: 2.5rem;\n    cursor: pointer;\n    width: 3rem;\n}\n\n.form-container-content{\n    background-color: var(--main-background-color);\n    color: black;\n    padding: 15px;\n    display: flex;\n    flex-flow:column nowrap ;\n    height: 100%;\n}\n\n.form-container-content-input{\n    background-color: var(--item-background-color);\n    border: none;\n    font-size: 1.2rem;\n    resize: none;\n    font-family: lato, sans-serif;\n    margin-bottom: 0.5rem;\n}\n\n#task-form-description{\n    height: 8rem;\n    margin-bottom: auto;\n    font-size: 1rem;\n}\n\n.container-bottom{\n    display: flex;\n    flex-flow: row nowrap;\n    justify-content: space-between;\n}\n\n.form-container-date{\n    display: flex;\n    justify-content: left;\n    align-items: center;\n}\n\n.form-date-input{\n    height: 1.5rem;\n    width: 10rem;\n    text-align: center;\n    border: 1px solid var(--container-items-color);\n    border-radius: 3px;\n    color: var(--container-items-color);\n}\n\n.form-submit{\n    height: 1.5rem;\n    min-width: 10rem;\n    width: 50%;\n    text-align: center;\n    align-self: center;\n    margin: 8px;\n    cursor: pointer;\n    font-weight: 700;\n    text-transform: uppercase;\n    border: 1px solid var(--container-items-color);\n    border-radius: 3px;\n    color: var(--container-items-color);\n}\n\n.form-submit:hover{\n    background-color: var(--container-items-color);\n    color: white;\n}\n\n\n\n\n/* Footer */\n\nfooter {\n    grid-row: 3; /* Footer takes the third row */\n    background-color: var(--nav-background-color);\n    color: var(--nav-text-color);\n    font-size: 1rem;\n    padding: 12px;\n    text-align: center;\n    letter-spacing: 0 1rem;\n    border-top: black 2px solid;\n}\n\n\n\n\n\n@media (max-width: 930px){\n\n    main{\n        flex-direction: column;\n        width: 100%;\n    }\n\n    #navigation-bar{\n        max-width: 100%;\n        width: calc(100% - 40px); \n        padding-top: 0;\n    }\n    \n    .sidebar-hidden {\n        transform: translateY(-100%); /* Move the sidebar off-screen */\n        pointer-events: none;\n        opacity: 0;\n        height: 0;\n    }\n\n    \n\n    #content{\n        width: auto;\n        min-height: 90vh;\n    }\n\n}\n\n@media(max-width: 420px) {\n    .create-task-bottom{\n        flex-direction: column;\n        justify-content: center;\n    }\n}`,"",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"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",sourcesContent:[":root{\n    --nav-background-color: #DC144F;\n    --nav-text-color: #fff;\n    --main-background-color: #e7e5e4;\n    --item-background-color: #fafaf9;\n    --hover-item-color:#c50b46;\n    --container-items-color:#fb3868;\n}\n\n\nbody {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    min-height: 100vh;\n    display: grid;\n    grid-template-rows: auto 1fr auto; /* Three rows: header, main content, footer */\n}\n\nheader {\n    grid-row: 1; /* Header takes the first row */\n    background-color: var(--nav-background-color);\n    color: var(--nav-text-color);\n    padding: 10px;\n    text-align: center;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding-inline: 1.5rem;\n    border-bottom: black 2px solid;\n}\n\n.header-title {\n    font-size: 2.2rem;\n    margin: 0.5rem;\n    flex-grow: 1; /* Allow the title to grow and take the available space */\n}\n\n#menuBtn{\n    background-color: inherit;\n    cursor: pointer;\n    border: 0;\n}\n\n\n#menuBtn img{\n    height: 25px;\n    width: 25px;\n}\n\n\n.sidebar-hidden {\n    transform: translateX(-100%); /* Move the sidebar off-screen */\n}\n\n\n/* Navigation bar */\n\nnav {\n    transition: transform 0.3s ease; /* Adding transition for smoother animation */\n    transform: translateX(0); /* Initial position */\n    transform: translateY(0);\n}\n\n#navigation-bar {\n    background-color: var(--nav-background-color);\n    max-width: 330px; /* Set the width of the sidebar */\n    width: calc(60% - 40px); /* 40px is padding from both sides */\n    position: static; /* Fixed position so it stays in place */\n    overflow-y: auto; /* Enable vertical scrolling */\n    padding: 20px;\n}\n\n#navigation-bar  ul {\n    margin: 0;\n    padding: 0;\n    list-style-type: none;\n    border: 0;\n}\n\n#navigation-bar  ul li a {\n    display: block;\n    color: var(--nav-text-color);\n    padding: 15px 20px;\n    text-decoration: none;\n    border-radius: 5px;\n    font-size: 20px;\n}\n\n\n#navigation-bar  ul li a:hover {\n    background-color: var(--hover-item-color);\n}\n\n#add-project-btn{\n    margin-top: 10px;\n    padding-inline: 15px;\n    list-style-type: none;\n    width: 100%;\n    height: 45px;\n    font-size: 20px;\n    border: 0;\n    border-radius: 5px;\n    background-color: inherit;\n}\n\n#add-project-btn:hover {\n    background-color: var(--hover-item-color);  \n}\n\n#add-project-btn span{\n    display: flex;\n    justify-content: left;\n    align-items: center;\n    color: var(--nav-text-color);\n}\n\n\n#add-project-btn span img{\n    width: 30px;\n    height: 30px;\n    margin-right: 35px;\n    color: var(--nav-text-color);\n    border: black solid 3px;\n    border-radius: 50%;\n}\n\n.project {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    color: var(--nav-text-color);\n    padding: 15px 20px;\n    text-decoration: none;\n    font-size: 2rem;\n    border-radius: 5px;\n    cursor: pointer;\n}\n\n.project:hover {\n    background-color: var(--hover-item-color); \n}\n\n.project-closer{\n    font-size: 2.5rem;\n}\n\n\n\n/* Creating new project */\n.creating-project{\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    height: 4.5rem;\n    align-items: center;\n    justify-content: space-around;\n}\n\n.new-project-title{\n    height: 1.5rem;\n    width: 90%;\n}\n\n.creating-project-btns{\n    display: flex;\n    flex-flow: row nowrap;\n    gap: 20px;\n    width: 90% ;\n}\n\n.creating-project-btn{\n    height: 1.5rem;\n    width: 50%;\n    color: black;\n    text-align: center;\n    border-radius: 4px;\n    border: none;\n    cursor: pointer;\n    font-size: 1rem;\n}\n\n.creating-project-btn:first-child{\n    background-color: rgb(42, 189, 103);\n}\n\n.creating-project-btn:last-child{\n    background-color: rgb(225, 165, 21);\n}\n\n.navigation-title{\n    font-size: 30px;\n    font-weight: bold;\n    border-bottom: black 2px solid;\n    margin-block: 15px;\n}\n\n\n/* Main */\n\nmain {\n    grid-row: 2/3; /* Main content takes the second row */\n    background-color: var(--main-background-color);\n    display: flex;\n    flex-direction: row;\n    width: 100%;\n}\n\n#content{\n    display: flex;\n    flex-direction: column;\n    margin-inline: 3rem;\n    margin-block: 1.5rem;\n    width: 100%;\n    background-color: var(--main-background-color);\n}\n\n#project-title{\n    font-size: 3rem;\n    margin: 0;\n    padding: 1.2rem;\n    border-radius: 5px;\n    max-height: 4rem;\n    background-color: var(--nav-background-color);\n    color: var(--nav-text-color);\n}\n\n.task-container{\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    margin-block: 1.5rem;\n    padding-inline: 0.8rem;\n    min-width:420px ;\n    border-radius: 5px;\n    background-color: var(--nav-background-color);\n}\n\n.task-container .left-side{\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    gap: 1rem;\n    align-items: center;\n}\n\n\n.task-container .right-side{\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    gap: 0.6rem;\n    align-items: center;\n}\n\n\n\n.task-checkbox {\n    width: 1rem;\n    height: 1rem;\n    background-color: #fff;\n    border: 1px solid black;\n    border-radius: 10px;\n    cursor: pointer;\n}\n\n/* All checked elements */\n\n.checked{\n    opacity: 0.6;\n}\n\n.checked > .task-checkbox{\n    background-color: var(--container-items-color);\n    background-size: 100%;\n    background-image: url(../assets/check-mark.svg);\n    background-repeat: no-repeat;\n    background-origin:border-box ;\n}\n\n.checked > .task-title{\n    text-decoration: line-through;\n}\n\n/* Importants  */\n.importantBtn{\n    background-image: url(../assets/star.svg);\n    height: 1.2rem;\n    width: 1.2rem;\n    background-repeat: round;\n    background-origin:border-box ;\n    cursor: pointer;\n}\n\n.important{\n    background-image: url(../assets/star_filled.svg);\n}\n\n/* other task buttons */\n.task-editBtn{\n    background-image: url(../assets/edit.svg);\n    height: 1.2rem;\n    width: 1.2rem;\n    background-repeat: round;\n    background-origin:border-box ;\n    cursor: pointer;\n}\n\n.task-deleteBtn{\n    background-image: url(../assets/delete.svg);\n    height: 1.2rem;\n    width: 1.2rem;\n    background-repeat: round;\n    background-origin:border-box ;\n    cursor: pointer;\n}\n\n.task-details{\n    font-size: 0.9rem;\n    padding: 5px;\n    border-radius: 5px;\n    border: black solid 1px;\n    cursor: pointer;\n}\n\n.overlay-details {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    z-index: 1000;\n}\n\n.detail-window {\n    background-color: white;\n    padding: 20px;\n    border-radius: 5px;\n    max-width: 500px;\n    width: 90%;\n}\n\n.detail-window h2 {\n    margin-top: 0;\n}\n\n.detail-window button {\n    margin-top: 15px;\n    padding: 5px 10px;\n    background-color: #007bff;\n    color: white;\n    border: none;\n    border-radius: 3px;\n    cursor: pointer;\n}\n\n.detail-window button:hover {\n    background-color: #0056b3;\n}\n\n.task-date{\n    font-size: 0.9rem;\n    padding: 5px;\n    border-radius: 5px;\n    border: black solid 1px;\n}\n\n.task-date-expose{\n    background-color: var(--nav-background-color);\n    color: white;\n}\n\n\n#task-adding-btn{\n    position: fixed;\n    bottom: 15px; /* This will be adjusted dynamically */\n    right: 10px;\n    background-color: var(--nav-background-color);\n    color: var(--nav-text-color);\n    border: none;\n    border-radius: 50%;\n    width: 60px;\n    height: 60px;\n    cursor: pointer;\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    transition: bottom 0.3s ease; /* Smooth transition for bottom positioning */\n}\n\n\n#task-adding-btn > img{\n    width: 100%;\n    height: 100%;\n}\n\n\n/* New Task */\n.overlay-new{\n    position: fixed;\n    top: 0;\n    left: 0;\n    padding: 10px;\n    width: 100vw;\n    height: 100vh;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    visibility: visible;\n    opacity: 1;\n    transition: all .3s;\n    background-color: rgba(0, 0, 0, 0.3);\n    backdrop-filter: blur(10px);\n}\n\n.overlay-new-invisible{\n    visibility: hidden;\n    opacity: 0;\n}\n\n.form-container{\n    position: absolute;\n    visibility: hidden;\n    height: 30rem;\n    width: 90%;\n    min-width: 450px;\n    max-width: 1000px;\n    border-radius: 4px;\n    overflow: hidden;\n    box-shadow: 0 2rem 4rem rgba(0, 0, 0, 0.6);\n    background-color: var(--item-background-color);\n    display: flex;\n    flex-flow: column nowrap;\n    transform: scale(0);\n}\n\n.form-container-open{\n    transform: scale(1);\n    visibility: visible;\n}\n\n.form-container-header{\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    justify-content: space-between;\n    background-color: var(--nav-background-color);\n    color: var(--item-background-color);\n}\n\n.form-container-title{\n    padding: 10px;\n    margin: 0;\n}\n\n.form-container-closer{\n    align-content: center;\n    text-align: center;\n    font-size: 2.5rem;\n    cursor: pointer;\n    width: 3rem;\n}\n\n.form-container-content{\n    background-color: var(--main-background-color);\n    color: black;\n    padding: 15px;\n    display: flex;\n    flex-flow:column nowrap ;\n    height: 100%;\n}\n\n.form-container-content-input{\n    background-color: var(--item-background-color);\n    border: none;\n    font-size: 1.2rem;\n    resize: none;\n    font-family: lato, sans-serif;\n    margin-bottom: 0.5rem;\n}\n\n#task-form-description{\n    height: 8rem;\n    margin-bottom: auto;\n    font-size: 1rem;\n}\n\n.container-bottom{\n    display: flex;\n    flex-flow: row nowrap;\n    justify-content: space-between;\n}\n\n.form-container-date{\n    display: flex;\n    justify-content: left;\n    align-items: center;\n}\n\n.form-date-input{\n    height: 1.5rem;\n    width: 10rem;\n    text-align: center;\n    border: 1px solid var(--container-items-color);\n    border-radius: 3px;\n    color: var(--container-items-color);\n}\n\n.form-submit{\n    height: 1.5rem;\n    min-width: 10rem;\n    width: 50%;\n    text-align: center;\n    align-self: center;\n    margin: 8px;\n    cursor: pointer;\n    font-weight: 700;\n    text-transform: uppercase;\n    border: 1px solid var(--container-items-color);\n    border-radius: 3px;\n    color: var(--container-items-color);\n}\n\n.form-submit:hover{\n    background-color: var(--container-items-color);\n    color: white;\n}\n\n\n\n\n/* Footer */\n\nfooter {\n    grid-row: 3; /* Footer takes the third row */\n    background-color: var(--nav-background-color);\n    color: var(--nav-text-color);\n    font-size: 1rem;\n    padding: 12px;\n    text-align: center;\n    letter-spacing: 0 1rem;\n    border-top: black 2px solid;\n}\n\n\n\n\n\n@media (max-width: 930px){\n\n    main{\n        flex-direction: column;\n        width: 100%;\n    }\n\n    #navigation-bar{\n        max-width: 100%;\n        width: calc(100% - 40px); \n        padding-top: 0;\n    }\n    \n    .sidebar-hidden {\n        transform: translateY(-100%); /* Move the sidebar off-screen */\n        pointer-events: none;\n        opacity: 0;\n        height: 0;\n    }\n\n    \n\n    #content{\n        width: auto;\n        min-height: 90vh;\n    }\n\n}\n\n@media(max-width: 420px) {\n    .create-task-bottom{\n        flex-direction: column;\n        justify-content: center;\n    }\n}"],sourceRoot:""}]);const B=h},314:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var d=0;d<n.length;d++){var A=[].concat(n[d]);r&&i[A[0]]||(void 0!==a&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=a),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),o&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=o):A[4]="".concat(o)),e.push(A))}},e}},417:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},354:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},72:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],s=0;s<n.length;s++){var c=n[s],d=r.base?c[0]+r.base:c[0],A=a[d]||0,l="".concat(d," ").concat(A);a[d]=A+1;var u=t(l),m={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)e[u].references++,e[u].updater(m);else{var h=o(m,r);r.byIndex=s,e.splice(s,0,{identifier:l,updater:h,references:1})}i.push(l)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=t(a[i]);e[s].references--}for(var c=r(n,o),d=0;d<a.length;d++){var A=t(a[d]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}a=c}}},659:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},540:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},56:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},825:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},113:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},440:(n,e,t)=>{n.exports=t.p+"0cd5721082beb1d9c90b.svg"},23:(n,e,t)=>{n.exports=t.p+"6dd749a958ebc902e009.svg"},322:(n,e,t)=>{n.exports=t.p+"5cca96bbf4bff6375bc6.svg"},718:(n,e,t)=>{n.exports=t.p+"cedb2e1b385a078a834e.svg"},541:(n,e,t)=>{n.exports=t.p+"02cccadebfedfbcf81d7.svg"}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.m=n,t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var r=e.getElementsByTagName("script");if(r.length)for(var o=r.length-1;o>-1&&(!n||!/^http(s?):/.test(n));)n=r[o--].src}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{var n=t(72),e=t.n(n),r=t(825),o=t.n(r),a=t(659),i=t.n(a),s=t(56),c=t.n(s),d=t(540),A=t.n(d),l=t(113),u=t.n(l),m=t(919),h={};h.styleTagTransform=u(),h.setAttributes=c(),h.insert=i().bind(null,"head"),h.domAPI=o(),h.insertStyleElement=A(),e()(m.A,h),m.A&&m.A.locals&&m.A.locals;const g={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function p(n){return(e={})=>{const t=e.width?String(e.width):n.defaultWidth;return n.formats[t]||n.formats[n.defaultWidth]}}const f={date:p({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:p({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:p({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},C={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function b(n){return(e,t)=>{let r;if("formatting"===(t?.context?String(t.context):"standalone")&&n.formattingValues){const e=n.defaultFormattingWidth||n.defaultWidth,o=t?.width?String(t.width):e;r=n.formattingValues[o]||n.formattingValues[e]}else{const e=n.defaultWidth,o=t?.width?String(t.width):n.defaultWidth;r=n.values[o]||n.values[e]}return r[n.argumentCallback?n.argumentCallback(e):e]}}const B={ordinalNumber:(n,e)=>{const t=Number(n),r=t%100;if(r>20||r<10)switch(r%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:b({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:b({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:n=>n-1}),month:b({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:b({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:b({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function I(n){return(e,t={})=>{const r=t.width,o=r&&n.matchPatterns[r]||n.matchPatterns[n.defaultMatchWidth],a=e.match(o);if(!a)return null;const i=a[0],s=r&&n.parsePatterns[r]||n.parsePatterns[n.defaultParseWidth],c=Array.isArray(s)?function(n,e){for(let e=0;e<n.length;e++)if(n[e].test(i))return e}(s):function(n,e){for(const e in n)if(Object.prototype.hasOwnProperty.call(n,e)&&n[e].test(i))return e}(s);let d;return d=n.valueCallback?n.valueCallback(c):c,d=t.valueCallback?t.valueCallback(d):d,{value:d,rest:e.slice(i.length)}}}const w={ordinalNumber:(k={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:n=>parseInt(n,10)},(n,e={})=>{const t=n.match(k.matchPattern);if(!t)return null;const r=t[0],o=n.match(k.parsePattern);if(!o)return null;let a=k.valueCallback?k.valueCallback(o[0]):o[0];return a=e.valueCallback?e.valueCallback(a):a,{value:a,rest:n.slice(r.length)}}),era:I({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:I({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:n=>n+1}),month:I({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:I({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:I({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};var k;const v={code:"en-US",formatDistance:(n,e,t)=>{let r;const o=g[n];return r="string"==typeof o?o:1===e?o.one:o.other.replace("{{count}}",e.toString()),t?.addSuffix?t.comparison&&t.comparison>0?"in "+r:r+" ago":r},formatLong:f,formatRelative:(n,e,t,r)=>C[n],localize:B,match:w,options:{weekStartsOn:0,firstWeekContainsDate:1}};let x={};function y(){return x}Math.pow(10,8);const E=6048e5,j=864e5;function T(n){const e=Object.prototype.toString.call(n);return n instanceof Date||"object"==typeof n&&"[object Date]"===e?new n.constructor(+n):"number"==typeof n||"[object Number]"===e||"string"==typeof n||"[object String]"===e?new Date(n):new Date(NaN)}function D(n){const e=T(n);return e.setHours(0,0,0,0),e}function S(n){const e=T(n),t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),+n-+t}function M(n,e){return n instanceof Date?new n.constructor(e):new Date(e)}function L(n){const e=T(n);return function(n,e){const t=D(n),r=D(e),o=+t-S(t),a=+r-S(r);return Math.round((o-a)/j)}(e,function(n){const e=T(n),t=M(n,0);return t.setFullYear(e.getFullYear(),0,1),t.setHours(0,0,0,0),t}(e))+1}function P(n,e){const t=y(),r=e?.weekStartsOn??e?.locale?.options?.weekStartsOn??t.weekStartsOn??t.locale?.options?.weekStartsOn??0,o=T(n),a=o.getDay(),i=(a<r?7:0)+a-r;return o.setDate(o.getDate()-i),o.setHours(0,0,0,0),o}function Y(n){return P(n,{weekStartsOn:1})}function W(n){const e=T(n),t=e.getFullYear(),r=M(n,0);r.setFullYear(t+1,0,4),r.setHours(0,0,0,0);const o=Y(r),a=M(n,0);a.setFullYear(t,0,4),a.setHours(0,0,0,0);const i=Y(a);return e.getTime()>=o.getTime()?t+1:e.getTime()>=i.getTime()?t:t-1}function N(n){const e=T(n),t=+Y(e)-+function(n){const e=W(n),t=M(n,0);return t.setFullYear(e,0,4),t.setHours(0,0,0,0),Y(t)}(e);return Math.round(t/E)+1}function q(n,e){const t=T(n),r=t.getFullYear(),o=y(),a=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??o.firstWeekContainsDate??o.locale?.options?.firstWeekContainsDate??1,i=M(n,0);i.setFullYear(r+1,0,a),i.setHours(0,0,0,0);const s=P(i,e),c=M(n,0);c.setFullYear(r,0,a),c.setHours(0,0,0,0);const d=P(c,e);return t.getTime()>=s.getTime()?r+1:t.getTime()>=d.getTime()?r:r-1}function z(n,e){const t=T(n),r=+P(t,e)-+function(n,e){const t=y(),r=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??t.firstWeekContainsDate??t.locale?.options?.firstWeekContainsDate??1,o=q(n,e),a=M(n,0);return a.setFullYear(o,0,r),a.setHours(0,0,0,0),P(a,e)}(t,e);return Math.round(r/E)+1}function F(n,e){return(n<0?"-":"")+Math.abs(n).toString().padStart(e,"0")}const O={y(n,e){const t=n.getFullYear(),r=t>0?t:1-t;return F("yy"===e?r%100:r,e.length)},M(n,e){const t=n.getMonth();return"M"===e?String(t+1):F(t+1,2)},d:(n,e)=>F(n.getDate(),e.length),a(n,e){const t=n.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return t.toUpperCase();case"aaa":return t;case"aaaaa":return t[0];default:return"am"===t?"a.m.":"p.m."}},h:(n,e)=>F(n.getHours()%12||12,e.length),H:(n,e)=>F(n.getHours(),e.length),m:(n,e)=>F(n.getMinutes(),e.length),s:(n,e)=>F(n.getSeconds(),e.length),S(n,e){const t=e.length,r=n.getMilliseconds();return F(Math.trunc(r*Math.pow(10,t-3)),e.length)}},H={G:function(n,e,t){const r=n.getFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return t.era(r,{width:"abbreviated"});case"GGGGG":return t.era(r,{width:"narrow"});default:return t.era(r,{width:"wide"})}},y:function(n,e,t){if("yo"===e){const e=n.getFullYear(),r=e>0?e:1-e;return t.ordinalNumber(r,{unit:"year"})}return O.y(n,e)},Y:function(n,e,t,r){const o=q(n,r),a=o>0?o:1-o;return"YY"===e?F(a%100,2):"Yo"===e?t.ordinalNumber(a,{unit:"year"}):F(a,e.length)},R:function(n,e){return F(W(n),e.length)},u:function(n,e){return F(n.getFullYear(),e.length)},Q:function(n,e,t){const r=Math.ceil((n.getMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return F(r,2);case"Qo":return t.ordinalNumber(r,{unit:"quarter"});case"QQQ":return t.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(r,{width:"narrow",context:"formatting"});default:return t.quarter(r,{width:"wide",context:"formatting"})}},q:function(n,e,t){const r=Math.ceil((n.getMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return F(r,2);case"qo":return t.ordinalNumber(r,{unit:"quarter"});case"qqq":return t.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(r,{width:"narrow",context:"standalone"});default:return t.quarter(r,{width:"wide",context:"standalone"})}},M:function(n,e,t){const r=n.getMonth();switch(e){case"M":case"MM":return O.M(n,e);case"Mo":return t.ordinalNumber(r+1,{unit:"month"});case"MMM":return t.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(r,{width:"narrow",context:"formatting"});default:return t.month(r,{width:"wide",context:"formatting"})}},L:function(n,e,t){const r=n.getMonth();switch(e){case"L":return String(r+1);case"LL":return F(r+1,2);case"Lo":return t.ordinalNumber(r+1,{unit:"month"});case"LLL":return t.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(r,{width:"narrow",context:"standalone"});default:return t.month(r,{width:"wide",context:"standalone"})}},w:function(n,e,t,r){const o=z(n,r);return"wo"===e?t.ordinalNumber(o,{unit:"week"}):F(o,e.length)},I:function(n,e,t){const r=N(n);return"Io"===e?t.ordinalNumber(r,{unit:"week"}):F(r,e.length)},d:function(n,e,t){return"do"===e?t.ordinalNumber(n.getDate(),{unit:"date"}):O.d(n,e)},D:function(n,e,t){const r=L(n);return"Do"===e?t.ordinalNumber(r,{unit:"dayOfYear"}):F(r,e.length)},E:function(n,e,t){const r=n.getDay();switch(e){case"E":case"EE":case"EEE":return t.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},e:function(n,e,t,r){const o=n.getDay(),a=(o-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(a);case"ee":return F(a,2);case"eo":return t.ordinalNumber(a,{unit:"day"});case"eee":return t.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},c:function(n,e,t,r){const o=n.getDay(),a=(o-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(a);case"cc":return F(a,e.length);case"co":return t.ordinalNumber(a,{unit:"day"});case"ccc":return t.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(o,{width:"narrow",context:"standalone"});case"cccccc":return t.day(o,{width:"short",context:"standalone"});default:return t.day(o,{width:"wide",context:"standalone"})}},i:function(n,e,t){const r=n.getDay(),o=0===r?7:r;switch(e){case"i":return String(o);case"ii":return F(o,e.length);case"io":return t.ordinalNumber(o,{unit:"day"});case"iii":return t.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},a:function(n,e,t){const r=n.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(n,e,t){const r=n.getHours();let o;switch(o=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",e){case"b":case"bb":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(o,{width:"narrow",context:"formatting"});default:return t.dayPeriod(o,{width:"wide",context:"formatting"})}},B:function(n,e,t){const r=n.getHours();let o;switch(o=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",e){case"B":case"BB":case"BBB":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(o,{width:"narrow",context:"formatting"});default:return t.dayPeriod(o,{width:"wide",context:"formatting"})}},h:function(n,e,t){if("ho"===e){let e=n.getHours()%12;return 0===e&&(e=12),t.ordinalNumber(e,{unit:"hour"})}return O.h(n,e)},H:function(n,e,t){return"Ho"===e?t.ordinalNumber(n.getHours(),{unit:"hour"}):O.H(n,e)},K:function(n,e,t){const r=n.getHours()%12;return"Ko"===e?t.ordinalNumber(r,{unit:"hour"}):F(r,e.length)},k:function(n,e,t){let r=n.getHours();return 0===r&&(r=24),"ko"===e?t.ordinalNumber(r,{unit:"hour"}):F(r,e.length)},m:function(n,e,t){return"mo"===e?t.ordinalNumber(n.getMinutes(),{unit:"minute"}):O.m(n,e)},s:function(n,e,t){return"so"===e?t.ordinalNumber(n.getSeconds(),{unit:"second"}):O.s(n,e)},S:function(n,e){return O.S(n,e)},X:function(n,e,t){const r=n.getTimezoneOffset();if(0===r)return"Z";switch(e){case"X":return X(r);case"XXXX":case"XX":return Q(r);default:return Q(r,":")}},x:function(n,e,t){const r=n.getTimezoneOffset();switch(e){case"x":return X(r);case"xxxx":case"xx":return Q(r);default:return Q(r,":")}},O:function(n,e,t){const r=n.getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+U(r,":");default:return"GMT"+Q(r,":")}},z:function(n,e,t){const r=n.getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+U(r,":");default:return"GMT"+Q(r,":")}},t:function(n,e,t){return F(Math.trunc(n.getTime()/1e3),e.length)},T:function(n,e,t){return F(n.getTime(),e.length)}};function U(n,e=""){const t=n>0?"-":"+",r=Math.abs(n),o=Math.trunc(r/60),a=r%60;return 0===a?t+String(o):t+String(o)+e+F(a,2)}function X(n,e){return n%60==0?(n>0?"-":"+")+F(Math.abs(n)/60,2):Q(n,e)}function Q(n,e=""){const t=n>0?"-":"+",r=Math.abs(n);return t+F(Math.trunc(r/60),2)+e+F(r%60,2)}const G=(n,e)=>{switch(n){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},$=(n,e)=>{switch(n){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}},Z={p:$,P:(n,e)=>{const t=n.match(/(P+)(p+)?/)||[],r=t[1],o=t[2];if(!o)return G(n,e);let a;switch(r){case"P":a=e.dateTime({width:"short"});break;case"PP":a=e.dateTime({width:"medium"});break;case"PPP":a=e.dateTime({width:"long"});break;default:a=e.dateTime({width:"full"})}return a.replace("{{date}}",G(r,e)).replace("{{time}}",$(o,e))}},R=/^D+$/,J=/^Y+$/,V=["D","DD","YY","YYYY"];function _(n){if(!(e=n,e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)||"number"==typeof n))return!1;var e;const t=T(n);return!isNaN(Number(t))}const K=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,nn=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,en=/^'([^]*?)'?$/,tn=/''/g,rn=/[a-zA-Z]/;function on(n,e,t){const r=y(),o=t?.locale??r.locale??v,a=t?.firstWeekContainsDate??t?.locale?.options?.firstWeekContainsDate??r.firstWeekContainsDate??r.locale?.options?.firstWeekContainsDate??1,i=t?.weekStartsOn??t?.locale?.options?.weekStartsOn??r.weekStartsOn??r.locale?.options?.weekStartsOn??0,s=T(n);if(!_(s))throw new RangeError("Invalid time value");let c=e.match(nn).map((n=>{const e=n[0];return"p"===e||"P"===e?(0,Z[e])(n,o.formatLong):n})).join("").match(K).map((n=>{if("''"===n)return{isToken:!1,value:"'"};const e=n[0];if("'"===e)return{isToken:!1,value:an(n)};if(H[e])return{isToken:!0,value:n};if(e.match(rn))throw new RangeError("Format string contains an unescaped latin alphabet character `"+e+"`");return{isToken:!1,value:n}}));o.localize.preprocessor&&(c=o.localize.preprocessor(s,c));const d={firstWeekContainsDate:a,weekStartsOn:i,locale:o};return c.map((r=>{if(!r.isToken)return r.value;const a=r.value;return(!t?.useAdditionalWeekYearTokens&&function(n){return J.test(n)}(a)||!t?.useAdditionalDayOfYearTokens&&function(n){return R.test(n)}(a))&&function(n,e,t){const r=function(n,e,t){const r="Y"===n[0]?"years":"days of the month";return`Use \`${n.toLowerCase()}\` instead of \`${n}\` (in \`${e}\`) for formatting ${r} to the input \`${t}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`}(n,e,t);if(console.warn(r),V.includes(n))throw new RangeError(r)}(a,e,String(n)),(0,H[a[0]])(s,a,o.localize,d)})).join("")}function an(n){const e=n.match(en);return e?e[1].replace(tn,"'"):n}class sn{constructor(n,e,t,r){this.id=sn.generateId(r),this.title=n,this.description=e,this.dueDate=t,this.isImportant=!1}static generateId(){return"_"+Math.random().toString(36).substr(2,9)}getId(){return this.id}getTitle(){return this.title}getDescription(){return this.description}getDueDate(){return this.dueDate}setTitle(n){this.title=n}setDescription(n){this.description=n}setDueDate(n){this.dueDate=n}getIsImportant(){return this.isImportant}changeIsImportant(){this.isImportant=!this.isImportant}}const cn=sn,dn=class{constructor(n){this.allTasks=[],this.name=n}getName(){return this.name}getAllTasks(){return this.allTasks}createNewTask(n,e,t){const r=new cn(n,e,t,this.name);return this.allTasks.push(r),r}addNewTask(n){this.allTasks.push(n)}getTaskById(n){return this.allTasks.find((e=>e.getId()===n))}deleteTask(n){this.allTasks=this.allTasks.filter((e=>e.getId()!==n.getId()))}updateTask(n){const e=this.allTasks.findIndex((e=>e.getId()===n.getId()));-1!==e&&(this.allTasks[e]=n)}};new class{constructor(){this.currentProject=null,this.projects=[],this.initializeEventListeners(),this.loadFromLocalStorage()}initializeEventListeners(){window.addEventListener("load",(()=>this.adjustTaskButtonPosition())),window.addEventListener("resize",(()=>this.adjustTaskButtonPosition())),window.addEventListener("scroll",(()=>this.adjustTaskButtonPosition()));const n=document.getElementById("menuBtn");n&&n.addEventListener("click",(()=>this.toggleSidebar())),document.addEventListener("DOMContentLoaded",(()=>{this.initializeTaskFormListeners(),this.initializeProjectListeners();const n=document.getElementById("All-tasks"),e=document.getElementById("Today-tasks"),t=document.getElementById("Next-7-days-tasks"),r=document.getElementById("Important-tasks");n&&n.addEventListener("click",(n=>{n.preventDefault(),this.displayAllTasks()})),e&&e.addEventListener("click",(n=>{n.preventDefault(),this.displayTodayTasks()})),t&&t.addEventListener("click",(n=>{n.preventDefault(),this.displayNext7DaysTasks()})),r&&r.addEventListener("click",(n=>{n.preventDefault(),this.displayImportantTasks()}))}))}initializeTaskFormListeners(){const n=document.getElementById("task-adding-btn"),e=document.querySelector(".form-container"),t=document.querySelector(".form-container-closer"),r=document.querySelector(".form-container-title"),o=document.getElementById("form-task-submit");n&&e&&t&&r&&o&&(n.addEventListener("click",(()=>{this.currentProject&&(this.prepareFormForNewTask(),this.openForm())})),t.addEventListener("click",(()=>this.closeForm())),e.addEventListener("submit",(n=>{if(n.preventDefault(),"Add new task"===o.value)this.addNewTask();else{const n=o.dataset.taskId,e=this.currentProject.getTaskById(n);this.updateTask(e)}this.closeForm(e)})))}prepareFormForNewTask(){const n=document.querySelector(".form-container-title"),e=document.getElementById("form-task-submit");n.textContent="Creating Task",e.value="Add new task",e.removeAttribute("data-task-id"),this.clearForm()}prepareFormForEditingTask(n){const e=document.querySelector(".form-container-title"),t=document.getElementById("form-task-submit");e.textContent="Editing Task",t.value="Save changes",t.dataset.taskId=n.getId();const r=document.getElementById("task-form-title"),o=document.getElementById("task-form-description"),a=document.getElementById("task-form-date");r.textContent=n.getTitle(),o.textContent=n.getDescription(),a.textContent=n.getDueDate}clearForm(){const n=document.getElementById("task-form-title"),e=document.getElementById("task-form-description"),t=document.getElementById("task-form-date");n.value="",e.value="",t.value=""}openForm(){const n=document.querySelector(".overlay-new"),e=document.querySelector(".form-container");n.classList.remove("overlay-new-invisible"),e.classList.add("form-container-open")}closeForm(){const n=document.querySelector(".overlay-new"),e=document.querySelector(".form-container");n.classList.add("overlay-new-invisible"),e.classList.remove("form-container-open"),e.reset()}addNewTask(){if(!this.currentProject)return void console.error("No current project set");const n=document.getElementById("task-form-title"),e=document.getElementById("task-form-description"),t=document.getElementById("task-form-date"),r=document.getElementById("tasks"),o=new cn(n.value,e.value,new Date(t.value),this.currentProject.getName());this.currentProject.addNewTask(o),r.appendChild(this.newTaskContainer(o)),this.saveToLocalStorage()}updateTask(n){const e=document.getElementById("task-form-title"),t=document.getElementById("task-form-description"),r=document.getElementById("task-form-date");n.setTitle(e.value),n.setDescription(t.value),n.setDueDate(new Date(r.value)),this.updateTaskContainers(),this.saveToLocalStorage()}initializeProjectListeners(){const n=document.getElementById("add-project-btn");n&&n.addEventListener("click",(()=>this.addingNewProject()))}adjustTaskButtonPosition(){const n=document.getElementById("task-adding-btn"),e=document.querySelector("footer");if(n&&e){const t=e.getBoundingClientRect(),r=window.innerHeight;n.style.bottom=t.top<r?r-t.top+15+"px":"15px"}}toggleSidebar(){const n=document.getElementById("navigation-bar");n&&(n.classList.toggle("sidebar-hidden"),n.style.width=n.classList.contains("sidebar-hidden")?"0":"calc(100% - 40px)",n.style.padding=n.classList.contains("sidebar-hidden")?"0":"20px")}updateTaskContainers(){const n=document.getElementById("tasks");n&&(this.deleteAllTasksContainers(),this.currentProject&&this.currentProject.getAllTasks().forEach((e=>{n.appendChild(this.newTaskContainer(e))})))}changeProject(n){this.currentProject=n;const e=document.getElementById("project-title");e&&(e.textContent=this.currentProject?this.currentProject.getName():"All Tasks"),null===n?this.displayAllTasks():this.updateTaskContainers(),this.saveToLocalStorage()}newTaskContainer(n){const e=document.createElement("div");e.classList.add("task-container");const t=document.createElement("div");t.classList.add("left-side");const r=document.createElement("div");r.classList.add("right-side");const o=document.createElement("div");o.classList.add("task-checkbox"),o.addEventListener("click",(()=>{this.markOrUnmark(t,r)})),t.appendChild(o);const a=document.createElement("div");a.classList.add("importantBtn"),a.addEventListener("click",(()=>{a.classList.toggle("important"),n.changeIsImportant(),this.saveToLocalStorage()})),n.getIsImportant()&&a.classList.add("important"),t.appendChild(a);const i=document.createElement("p");i.textContent=n.getTitle(),i.classList.add("task-title"),t.appendChild(i),e.appendChild(t);const s=document.createElement("div");s.textContent="Details",s.classList.add("task-details"),s.addEventListener("click",(()=>{this.showTaskDetails(n)})),r.appendChild(s);const c=document.createElement("span");c.textContent=this.isExpose(n.getDueDate())?"Expired":on(n.getDueDate(),"dd/MM/yyyy"),c.classList.add("task-date"),r.appendChild(c);const d=document.createElement("div");d.classList.add("task-editBtn"),d.addEventListener("click",(()=>{const e=this.findProjectForTask(n);e&&(this.changeProject(e),this.prepareFormForEditingTask(n),this.openForm())})),r.appendChild(d);const A=document.createElement("div");return A.classList.add("task-deleteBtn"),A.addEventListener("click",(()=>{const t=this.findProjectForTask(n);t&&(t.deleteTask(n),this.deleteCorrectContainer(e),null===this.currentProject?this.displayAllTasks():"Today's Tasks"===projectTitle.textContent?this.displayTodayTasks():"Next 7 Days Tasks"===projectTitle.textContent?this.displayNext7DaysTasks():this.updateTaskContainers())})),r.appendChild(A),e.appendChild(r),e}markOrUnmark(n,e){n.classList.toggle("checked"),e.classList.toggle("checked")}deleteCorrectContainer(n){n&&n.parentElement&&(n.parentElement.removeChild(n),this.saveToLocalStorage())}deleteAllTasksContainers(){const n=document.getElementById("tasks");if(n)for(;n.firstChild;)n.removeChild(n.firstChild)}findProjectForTask(n){return this.projects.find((e=>e.getTaskById(n.getId())))}addingNewProject(){const n=document.getElementById("projects"),e=document.createElement("form");e.classList.add("creating-project");const t=document.createElement("input"),r=document.createElement("div"),o=document.createElement("input"),a=document.createElement("div");t.classList.add("new-project-title"),t.maxLength=24,t.type="text",t.placeholder="Enter Project Name",t.required=!0,r.classList.add("creating-project-btns"),o.classList.add("creating-project-btn"),o.setAttribute("id","addProjectBtn"),o.type="submit",o.value="Add",a.classList.add("creating-project-btn"),a.textContent="Cancel",r.appendChild(o),r.appendChild(a),e.appendChild(t),e.appendChild(r),n&&n.appendChild(e),e.addEventListener("submit",(n=>{n.preventDefault();const r=new dn(t.value);this.createProjectContainer(r),this.changeProject(r),this.deleteCorrectContainer(e)})),a.addEventListener("click",(()=>{this.deleteCorrectContainer(e)}))}createProjectContainer(n){const e=document.getElementById("projects"),t=document.createElement("div"),r=document.createElement("div"),o=document.createElement("div");t.classList.add("project"),r.classList.add("project-title"),o.classList.add("project-closer"),r.textContent=n.getName(),o.textContent="×",r.addEventListener("click",(()=>{this.changeProject(n)})),o.addEventListener("click",(()=>{this.deleteCorrectContainer(t),this.projects=this.projects.filter((e=>e!==n)),this.currentProject===n&&this.changeProject(this.projects.length>0?this.projects[0]:null),this.saveToLocalStorage()})),t.appendChild(r),t.appendChild(o),e&&e.appendChild(t),this.projects.includes(n)||(this.projects.push(n),this.saveToLocalStorage())}isExpose(n){return function(n,e){const t=T(n),r=T(e);return t.getTime()>r.getTime()}(new Date,n)}showTaskDetails(n){const e=document.createElement("div");e.classList.add("overlay-details");const t=document.createElement("div");t.classList.add("detail-window");const r=document.createElement("h2");r.textContent=n.getTitle();const o=document.createElement("p");o.textContent=n.getDescription()||"No description provided";const a=document.createElement("p");a.textContent=`Due Date: ${on(n.getDueDate(),"dd/MM/yyyy")}`;const i=document.createElement("p"),s=this.findProjectForTask(n);i.textContent=`Project: ${s?s.getName():"Unknown"}`;const c=document.createElement("button");c.textContent="Close",c.addEventListener("click",(()=>{document.body.removeChild(e)})),t.appendChild(r),t.appendChild(o),t.appendChild(a),t.appendChild(i),t.appendChild(c),e.appendChild(t),document.body.appendChild(e)}displayAllTasks(){const n=document.getElementById("tasks"),e=document.getElementById("project-title");n&&e&&(n.innerHTML="",e.textContent="All Tasks",this.projects.forEach((e=>{e.getAllTasks().forEach((t=>{const r=this.newTaskContainer(t),o=document.createElement("span");o.textContent=`(${e.getName()})`,o.classList.add("task-project-name"),r.querySelector(".left-side").appendChild(o),n.appendChild(r)}))})))}displayTodayTasks(){const n=document.getElementById("tasks"),e=document.getElementById("project-title");if(n&&e){n.innerHTML="",e.textContent="Today's Tasks";const t=new Date;t.setHours(0,0,0,0),this.projects.forEach((e=>{e.getAllTasks().forEach((r=>{const o=new Date(r.getDueDate());if(o.setHours(0,0,0,0),o.getTime()===t.getTime()){const t=this.newTaskContainer(r),o=document.createElement("span");o.textContent=`(${e.getName()})`,o.classList.add("task-project-name"),t.querySelector(".left-side").appendChild(o),n.appendChild(t)}}))}))}}displayNext7DaysTasks(){const n=document.getElementById("tasks"),e=document.getElementById("project-title");if(n&&e){n.innerHTML="",e.textContent="Next 7 Days Tasks";const t=new Date;t.setHours(0,0,0,0);const r=new Date(t);r.setDate(t.getDate()+7),this.projects.forEach((e=>{e.getAllTasks().forEach((o=>{const a=new Date(o.getDueDate());if(a.setHours(0,0,0,0),a>=t&&a<=r){const t=this.newTaskContainer(o),r=document.createElement("span");r.textContent=`(${e.getName()})`,r.classList.add("task-project-name"),t.querySelector(".left-side").appendChild(r),n.appendChild(t)}}))}))}}displayImportantTasks(){const n=document.getElementById("tasks"),e=document.getElementById("project-title");n&&e&&(n.innerHTML="",e.textContent="Important Tasks",this.projects.forEach((e=>{e.getAllTasks().forEach((t=>{if(t.getIsImportant()){const r=this.newTaskContainer(t),o=document.createElement("span");o.textContent=`(${e.getName()})`,o.classList.add("task-project-name"),r.querySelector(".left-side").appendChild(o),n.appendChild(r)}}))})))}saveToLocalStorage(){const n=this.projects.map((n=>({name:n.getName(),tasks:n.getAllTasks().map((n=>({id:n.getId(),title:n.getTitle(),description:n.getDescription(),dueDate:n.getDueDate().toISOString(),isImportant:n.getIsImportant()})))})));localStorage.setItem("projects",JSON.stringify(n)),localStorage.setItem("currentProjectName",this.currentProject?this.currentProject.getName():"")}loadFromLocalStorage(){const n=localStorage.getItem("projects"),e=localStorage.getItem("currentProjectName");if(n&&(JSON.parse(n).forEach((n=>{const e=new dn(n.name);n.tasks.forEach((n=>{const t=new cn(n.title,n.description,new Date(n.dueDate),e.getName());t.id=n.id,n.isImportant&&t.changeIsImportant(),e.addNewTask(t)})),this.projects.push(e),this.createProjectContainer(e)})),e)){const n=this.projects.find((n=>n.getName()===e));n&&this.changeProject(n)}}};const An=on(new Date,"yyyy-MMM-dd");console.log("Formatted Date:",An)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,